components:
  schemas:
    Webhook:
      required:
        - payloadUrl
        - contentType
        - subscribedEvents
        - disabled
        - secretKey
        - skipSslVerification
        - timestamp
      type: object
      properties:
        id:
          type: string
        orgId:
          type: string
        payloadUrl:
          type: string
        contentType:
          type: string
        subscribedEvents:
          type: array
          items:
            type: string
        disabled:
          type: boolean
        secretKey:
          type: string
        skipSslVerification:
          type: boolean
        timestamp:
          type: string
    Pagination:
      type: object
      title: Pagination
      properties:
        currentPage:
          type: integer
          description: Current page number
        totalItems:
          type: integer
          description: Total number of items available
        totalPages:
          type: integer
          description: Total number of pages based on limit
        limit:
          type: integer
          description: Number of items per page
        hasPrevious:
          type: boolean
          description: Indicates if there's a previous page
        hasNext:
          type: boolean
          description: Indicates if there's a next page
    DataAgreement:
      type: object
      title: DataAgreement
      description: |
        An agreement contains the specification of a single purpose that can be consented to.  An DataAgreement is universal and can be consented to by *many* individuals through a DataAgreementRecord"
      x-not-in-database: false
      required:
        - purpose
        - purposeDescription
        - controllerUrl
        - controllerName
        - policy
        - lawfulBasis
        - methodOfUse
        - active
        - forgettable
        - lifecycle
      properties:
        id:
          type: string
          format: ''
          example: ''
          description: ''
        version:
          type: string
          format: ''
          example: ''
          description: The version of this specification to which a receipt conforms
        controllerId:
          type: string
          description: ID of the controller
        controllerUrl:
          type: string
          description: URL of data controller (may be omitted if no data involved)
        controllerName:
          type: string
          description: Name of data controller (may be omitted if no data involved)
        policy:
          $ref: '#/components/schemas/Policy'
          description: |
            Policy under which this DataAgreement shall be governed.  When creating a data agreement, the latest policy can be used to fill the default value,  and organisation admin can decide to change it in data agreement level
        purpose:
          type: string
          description: Name of purpose
        purposeDescription:
          type: string
          description: Description of purpose
        lawfulBasis:
          type: string
          format: ''
          example: ''
          description: Lawful basis of the agreement - consent / legal_obligation / contract / vital_interest / public_task / legitimate_interest
          enum:
            - consent
            - legal_obligation
            - contract
            - vital_interest
            - public_task
            - legitimate_interest
        methodOfUse:
          type: string
          format: ''
          example: ''
          description: null/data_source/data_using_service
          enum:
            - null
            - data_source
            - data_using_service
        dpiaDate:
          type: string
          format: ''
          example: ''
          description: The date on which the DPIA report is generated after a DPIA
        dpiaSummaryUrl:
          type: string
          description: 'The URl providing the DPIA result reports, summary etc that can be verified by any interested parties'
        signature:
          $ref: '#/components/schemas/Signature'
          x-fk-model: Signature
          description: |
            Signature of authorizing party of DataAgreement.  Note: Signatures may be chained in case of multiple signatures.
        active:
          type: boolean
          format: ''
          example: ''
          description: DataAgreement is active and new DataAgreementRecords can be created.
        forgettable:
          type: boolean
          format: ''
          example: ''
          description: 'DataAgreementRecord may be deleted when consent is withdrawn, as its existence is not necessary for auditability.'
        compatibleWithVersionId:
          type: string
          format: ''
          x-fk-model: DataAgreement
          description: |
            WIP: This field indicates that Data Agreement Records may be transferred from this  compatible previous revision of the same DataAgreement.
        lifecycle:
          type: string
          description: |
            WIP: Current Lifecycle state of the DataAgreement.  Lifecycle states are used to manage internal workflows and  should not be assigned semantic meanings for active Data Agreement Records.
          enum:
            - draft
            - complete
    AgreementData:
      type: object
      title: AgreementData
      description: DataAgreement data contains specifications of exactly what is collected.
      x-not-in-database: false
      required:
        - id
        - name
        - sensitivity
        - category
      properties:
        id:
          type: string
          format: ''
          example: ''
          description: ''
        agreement:
          $ref: '#/components/schemas/DataAgreement'
          x-fk-model: DataAgreement
          description: ''
        name:
          type: string
          format: ''
          example: ''
          description: 'Name of the attribute, for instance "name" or "age"'
        sensitivity:
          type: string
          format: ''
          example: ''
          description: categories of sensitivity
        category:
          type: string
          format: ''
          example: ''
          description: ''
    AgreementFilter:
      type: object
      title: AgreementFilter
      description: Query filter for API endpoint listing DataAgreement objects
      x-not-in-database: true
      required:
        - name
      properties:
        name:
          type: string
          format: ''
          example: ''
          description: ''
    AgreementLifecycle:
      type: object
      title: AgreementLifecycle
      description: 'TBD: Models the valid lifecycle states of an DataAgreement'
      x-not-in-database: false
      required:
        - id
        - name
      properties:
        id:
          type: string
          format: ''
          example: ''
          description: ''
        name:
          type: string
          format: ''
          example: ''
          description: Draft / Complete
    AgreementPurpose:
      type: object
      title: AgreementPurpose
      description: 'TBD: Models the purpose of an agreement'
      x-not-in-database: false
      required:
        - id
        - name
        - description
      properties:
        id:
          type: string
          format: ''
          example: ''
          description: ''
        name:
          type: string
          format: ''
          example: ''
          description: Name of purpose
        description:
          type: string
          format: ''
          example: ''
          description: Description of purpose
        serializedHash:
          type: string
          format: ''
          example: ''
          description: 'In order to sign an DataAgreement, this relation needs to have a cryptopgraphic hash of the JSON serialized data to be included in the Signature payload of the DataAgreement. Hashes are collected as the hex representation of the SHA-1 sum of all UTF8 encoded string versions of the JSON representation of data. SHA1(jsonSerializedData)'
    AuditEventType:
      type: object
      title: AuditEventType
      description: 'TBD: Model for the possible events pertaining a change to an object subject to auditing. This model is not necessarily a database-backed model, but part of application code.'
      x-not-in-database: false
      required:
        - id
        - eventName
      properties:
        id:
          type: string
          format: ''
          example: ''
          description: ''
        eventName:
          type: string
          format: ''
          example: ''
          description: What happened - create/update/delete
    AuditTracker:
      type: object
      title: AuditTracker
      description: 'TBD: An external tracker receiving information from the system that can be subject to external auditing and verification of correct behavior. This is one of several notification/monitor/subscription patterns that may be more suitable for an encrypted Pub/Sub service.'
      x-not-in-database: false
      required:
        - id
        - name
        - publicKey
        - callbackAgreement
        - callbackConsentRecord
        - callbackPolicy
      properties:
        id:
          type: string
          format: ''
          example: ''
          description: ''
        name:
          type: string
          format: ''
          example: ''
          description: Name of the auditing system
        publicKey:
          type: string
          format: ''
          example: ''
          description: The auditing system's public key for encrypting data sent to callback functions
        callbackAgreement:
          type: string
          format: ''
          example: ''
          description: A URL receiving a callback with the DataAgreement object + Revision + AuditEventType
        callbackConsentRecord:
          type: string
          format: ''
          example: ''
          description: A URL receiving a callback with the ConsentRecord object + Revision + AuditEventType
        callbackPolicy:
          type: string
          format: ''
          example: ''
          description: A URL receiving a callback with the Policy object + Revision + AuditEventType
        callbackRevisionTableHash:
          type: string
          format: ''
          example: ''
          description: 'A URL receiving a callback with <string> + AuditEventType. Periodically, the system can publish the hash of the revision table.'
        callbackSignatureTableHash:
          type: string
          format: ''
          example: ''
          description: 'A URL receiving a callback with <string> + AuditEventType. Periodically, the system can publish the hash of the signature table.'
    ConsentRecord:
      type: object
      title: ConsentRecord
      description: 'A Consent Record expresses consent (as defined in this building block''s specification) to a single DataAgreement. There must be a UNIQUE constraint on (agreementRevision, individual)'
      x-not-in-database: false
      required:
        - id
        - agreementRevisionHash
        - state
      properties:
        id:
          type: string
          format: ''
          example: ''
          description: 'Objects may be passed back by some API endpoints without an id (PK), denoting that they are a "draft", i.e. a ConsentRecord that is not yet stored in the database and only exist in transit. Draft ConsentRecords do not have a Revision, but if paired up with a Signature, a valid Revision should be generated.'
        agreement:
          $ref: '#/components/schemas/DataAgreement'
          x-fk-model: DataAgreement
          description: The DataAgreement to which consent has been given
        agreementRevision:
          $ref: '#/components/schemas/Revision'
          x-fk-model: Revision
          description: The Revision of the agreement which consent has been given to
        agreementRevisionHash:
          type: string
          format: ''
          example: ''
          description: Copy of the revision hash. The hash is the included in the signature and ensures against tampering with the original agreement.
        individual:
          $ref: '#/components/schemas/Individual'
          x-fk-model: Individual
          description: The Individual who has signed this consent record
        optIn:
          type: boolean
          format: ''
          example: ''
          description: 'True: The individual has positively opted in. False: The individual has explicitly said no (or withdrawn a previous consent).'
        state:
          type: string
          format: ''
          example: ''
          description: 'The state field is used to record state changes after-the-fact. It is maintained by the Consent BB itself. Valid states: unsigned/pending more signatures/signed'
        signature:
          $ref: '#/components/schemas/Signature'
          x-fk-model: Signature
          description: 'A signature that hashes all the values of the consent record and has signed it with the key of the Invidiual, making it verifiable and tamper-proof. TBD: Relation to a Signature schema?'
    ConsentRecordFilter:
      type: object
      title: ConsentRecordFilter
      description: Query filter for API endpoint listing ConsentRecord objects
      x-not-in-database: true
      required:
        - optIn
      properties:
        optIn:
          type: boolean
          format: ''
          example: ''
          description: ''
        agreement:
          $ref: '#/components/schemas/DataAgreement'
          x-fk-model: DataAgreement
          description: ''
        agreementRevision:
          $ref: '#/components/schemas/Revision'
          x-fk-model: Revision
          description: ''
        individual:
          $ref: '#/components/schemas/Individual'
          x-fk-model: Individual
          description: ''
        functionalId:
          type: string
          format: ''
          example: ''
          description: ''
        foundationalId:
          type: string
          format: ''
          example: ''
          description: ''
    Controller:
      type: object
      title: Controller
      description: Details of a data controller.
      x-not-in-database: false
      required:
        - id
        - name
        - url
      properties:
        id:
          type: string
          format: ''
          example: ''
          description: ''
        name:
          type: string
          format: ''
          example: ''
          description: Name of data controller (may be omitted if no data involved)
        url:
          type: string
          format: ''
          example: ''
          description: URL of data controller (may be omitted if no data involved)
    Individual:
      type: object
      title: Individual
      description: 'Shallowly models an Individual which may reference some instance in an external system (registration system, functional ID, foundational ID etc). An Individual instance of this model is not to be mistaken with a unique natural individual. It is up to the system owner to decide if this record permits mapping to a natural individual and/or if a single Individual row can map to several consent agreements.'
      x-not-in-database: false
      required:
        - id
      properties:
        id:
          type: string
          format: ''
          example: ''
          description: The unique ID of an Individual row.
        externalId:
          type: string
          format: ''
          example: ''
          description: 'Reference to another foundational/functional ID, which is likely PII'
        externalIdType:
          type: string
          format: ''
          example: ''
          description: External id type specifier. A string. For instance "email" or "foundational id". Can be used in later queries.
        identityProviderId:
          type: string
          format: ''
          example: ''
          description: 'This could be an FK, but for now we do not have a mapping of identity providers. IDBB may have more requirements.'
    IndividualFilter:
      type: object
      title: IndividualFilter
      description: 'TBD: When creating an Invidiual, we need some input that refers to a functional or foundational ID in an external system'
      x-not-in-database: true
      properties:
        foundationalId:
          type: string
          format: ''
          example: ''
          description: ''
        functionalId:
          type: string
          format: ''
          example: ''
          description: ''
    Policy:
      type: object
      title: Policy
      description: A policy governs data and DataAgreement in the realm of an organisation that is refered to as "data controller" (GDPR) and owner of referencing Agreements.
      x-not-in-database: false
      required:
        - name
        - url
      properties:
        id:
          type: string
          format: ''
          example: ''
          description: ''
        name:
          type: string
          format: ''
          example: ''
          description: Name of the policy
        version:
          type: string
          format: ''
          example: ''
          description: Version of the policy. It can follow semver format.
        url:
          type: string
          format: ''
          example: ''
          description: 'Permanent URL at which this very version of the Policy can be read, should not be allowed to change over time.'
        jurisdiction:
          type: string
          format: ''
          example: ''
          description: ''
        industrySector:
          type: string
          format: ''
          example: ''
          description: ''
        dataRetentionPeriodDays:
          type: integer
          format: ''
          example: ''
          description: ''
        geographicRestriction:
          type: string
          format: ''
          example: ''
          description: ''
        storageLocation:
          type: string
          format: ''
          example: ''
          description: ''
    Revision:
      type: object
      title: Revision
      description: |-
        A *generic* revision model captures the serialized contents of any schema's single row. This is then subject to 1) cryptographic signature and 2) auditing.

        Aside from "successor" column, a revision should be considered locked.
      x-not-in-database: false
      required:
        - id
        - schemaName
        - objectId
        - serizalizedSnapshot
        - serializedHash
        - timestamp
      properties:
        id:
          type: string
          format: ''
          example: ''
          description: ''
        schemaName:
          type: string
          format: ''
          example: ''
          description: This was previously called "schema" but for technical reasons should be called "schemaName"
          enum:
            - dataAgreement
            - policy
            - dataAgreementRecord
        objectId:
          type: string
          format: ''
          example: ''
          description: The PK of the object that was serialized.
        signedWithoutObjectId:
          type: boolean
          format: ''
          example: ''
          description: Indicates that objectId was left blank in serizalizedSnapshot when calculating serializedHash. objectId may be subsequently filled in.
        serizalizedSnapshot:
          type: string
          format: ''
          example: ''
          description: 'Revisioned data (serialized as JSON) as a dict.Apply JSON Canonicalization Scheme as per IETF RFC 8785. It contains all the fields of the schema except id, successor, predecessorHash and predecessorSignature.'
        serializedHash:
          type: string
          format: ''
          example: ''
          description: Hash of serizalizedSnapshot (SHA-1)
        timestamp:
          type: string
          format: ''
          example: ''
          description: Timestamp of when revisioning happened. It should be ISO 8601 UTC date time
        authorizedByIndividualId:
          description: Individual Id
          type: string
        authorizedByOtherId:
          type: string
          format: ''
          example: ''
          description: Reference to an admin user that has created this revision
        successorId:
          x-fk-model: Revision
          type: string
          description: 'If this revision is no longer the latest revision, refer to its successor.'
        predecessorHash:
          type: string
          format: ''
          example: ''
          description: 'Tamper-resistent artifact from previous record, copied from serializedHash'
        predecessorSignature:
          type: string
          format: ''
          example: ''
          description: Tamper-resistent artifact from previous record (we don't know if the previous record was signed or not)
    Signature:
      type: object
      title: Signature
      description: |
        A generic signature contains a cryptographic hash of some value,  together with a signature created by some private key in another system.  Required signing methods: Revision object or another Signature object.
      x-not-in-database: false
      required:
        - payload
        - signature
        - verificationMethod
        - verificationPayload
        - verificationPayloadHash
        - verificationSignedBy
        - timestamp
      properties:
        id:
          type: string
          format: ''
          example: ''
          description: 'Objects may be passed back by some API endpoints without an id (PK), denoting that they are a "draft", i.e. a Signature that is not yet stored in the database and only exist in transit.'
        payload:
          type: string
          format: ''
          example: ''
          description: 'The final payload that is signed, constructed as a JSON serialization of fields {verificationPayload: ..., verificationPayloadHash: ..., verificationMethod: ..., verificationArtifact: ..., verificationSignedBy: ..., verificationJwsHeader, timestamp: ..., signedWithoutObjectReference: ..., objectType: ..., objectReference: ...}. Serialized as a JSON dict. If the signature is generated before anything is stored in the database (and has a PK), then the objectReference should be omitted from the payload but filled in afterwards.'
        signature:
          type: string
          format: ''
          example: ''
          description: 'Signature of payload hash, the format of the signature should be specified by either verificationMethod or verificationJwsHeader'
        verificationMethod:
          type: string
          format: ''
          example: ''
          description: 'A well-known string denoting which method is used. Valid values: <TBD>. We might expand this with a relation to which verification methods that are supported. There may be a minimal set of supported methods necessary.'
        verificationPayload:
          type: string
          format: ''
          example: ''
          description: Internally generated serialized version of the data referenced by objectType and objectReference - by extracting and serializing their data as JSON.
        verificationPayloadHash:
          type: string
          format: ''
          example: ''
          description: 'Internally generated cryptographic hash of the value to be signed, i.e. the value of verificationPayload'
        verificationArtifact:
          type: string
          format: ''
          example: ''
          description: 'A verification artifact in the form of a scanned object, image, signature etc.'
        verificationSignedBy:
          type: string
          format: ''
          example: ''
          description: 'Because an identifier''s information may change over time, there is a need to store that information at the time of signing. In case of a cryptographic signature, this field should contain some identifier for looking up or verifying the public key of the signing party. In case of a non-cryptographic signature, this field could contain a natural individual''s names, personal number, email addresses - store a snapshot that binds to the signature at the time of signing. In case of a cryptographic signature, this may be the fingerprint of the individual''s public key or in some cases, a token from the user''s ID session.'
        verificationSignedAs:
          type: string
          format: ''
          example: ''
          description: 'DRAFT FIELD: Specifies the relationship between the authorizing signature and the invidual which the payload concerns. This is relevant for Consent Records. Possible values: "individual" / "delegate"'
        verificationJwsHeader:
          type: string
          format: ''
          example: ''
          description: 'Alternative to the verificationMethod, verificationHash and verificationSignature, give a JWS serialized object (RFC7515)'
        timestamp:
          type: string
          format: ''
          example: ''
          description: 'Timestamp of signature, currently this field isn''t part of the payload so it''s not tamper-proof.'
        signedWithoutObjectReference:
          type: boolean
          format: ''
          example: ''
          description: Indicates that objectReference was left blank in the serialized version that was signed.
        objectType:
          type: string
          format: ''
          example: ''
          description: 'Name of the schema model that objectReference points to. Values: "signature" or "revision"'
          enum:
            - revision
            - signature
        objectReference:
          type: string
          format: ''
          example: ''
          description: 'A symmetric relation / back reference to the objectType that was signed. We are currently just modelling signing another signature (a chain) or signing a Revision (which can be a revision of a consent record, an agreement, policy etc)'
    StatusReadiness:
      type: object
      description: This model is not stored in a database. It describes the status of the Building Block while running. Returns immediately. API should not be public.
      x-not-in-database: true
      required:
        - status
      properties:
        status:
          type: string
          format: ''
          example: ''
          description: 'Possible values: OK, WAITING, ERROR'
        errorMessage:
          type: string
          format: ''
          example: ''
          description: Description of failure
        waitingFor:
          type: string
          format: ''
          example: ''
          description: 'When a timeout occurs, a list of pending operations may be shared'
    StatusStartup:
      type: object
      title: StatusStartup
      description: 'This model is not stored in a database. It describes the status of the Building Block while starting up. API should not be public. This call is blocking until the system is ready, a timeout occurs or an error is detected.'
      x-not-in-database: true
      required:
        - status
      properties:
        status:
          type: string
          format: ''
          example: ''
          description: 'Possible values: OK, TIMEOUT, ERROR'
        errorMessage:
          type: string
          format: ''
          example: ''
          description: Description of failure
        waitingFor:
          type: string
          format: ''
          example: ''
          description: 'When a timeout occurs, a list of pending operations may be shared'
  securitySchemes:
    BearerAuth:
      bearerFormat: JWT
      description: Access token passed with Bearer prefix in Authorization header
      scheme: bearer
      type: http
info:
  contact:
    email: support@igrant.io
    name: iGrant.io
    url: 'https://igrant.io'
  description: 'The Consent Building Block enables services for individuals to approve the use  of their personal data by defining the principles, functions, and architecture  of an information system. For organisations that process personal data, it  provides the ability to know the individual''s will and legitimately process such  personal data. The Consent Building Block is a process-oriented GovStack Building Block  facilitating auditable bilateral data-agreements within a multi-agent environment that  integrates with most other Building Blocks.'
  license:
    name: Apache 2.0
    url: 'https://www.apache.org/licenses/LICENSE-2.0'
  title: Consent Building Block APIs
  version: 2023.8.2
openapi: 3.1.0
paths:
  '/audit/data-agreement-record/{dataAgreementRecordId}':
    get:
      description: READ - Fetch a single data agreement record
      operationId: auditConsentRecordRead
      parameters:
        - description: Unique ID of an object
          in: path
          name: dataAgreementRecordId
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConsentRecord'
          description: ''
        '400':
          description: bad input parameter
      security:
        - BearerAuth: []
      summary: READ - Fetch a single data agreement record
      tags:
        - auditor
      x-specification-crudl-model: ''
      x-specification-pii-or-sensitive: 'False'
      x-specification-scenario: ''
      x-specification-usecase: ''
  /audit/data-agreement-records:
    post:
      description: LIST - Fetch all consent records
      operationId: auditConsentRecordList
      parameters:
        - description: Requested index for start of resources to be provided in response requested by client
          in: query
          name: offset
          required: false
          schema:
            type: integer
        - description: Requested number of resources to be provided in response requested by client
          in: query
          name: limit
          required: false
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              properties:
                consentRecordFilter:
                  $ref: '#/components/schemas/ConsentRecordFilter'
                  description: An object of type ConsentRecordFilter
              required:
                - consentRecordFilter
              type: object
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  oneOf:
                    - $ref: '#/components/schemas/ConsentRecord'
                type: array
          description: ''
        '400':
          description: bad input parameter
      security:
        - BearerAuth: []
      summary: LIST - Fetch all consent records
      tags:
        - auditor
      x-specification-crudl-model: ''
      x-specification-pii-or-sensitive: 'False'
      x-specification-scenario: ''
      x-specification-usecase: UC-C-PIC-AT-003
  '/audit/data-agreement/{dataAgreementId}':
    get:
      description: READ - Fetch a single data agreement.
      operationId: auditReadRecord
      parameters:
        - description: Unique ID of an object
          in: path
          name: dataAgreementId
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataAgreement'
          description: ''
        '400':
          description: bad input parameter
      security:
        - BearerAuth: []
      summary: READ - Fetch a single data agreement.
      tags:
        - auditor
      x-specification-crudl-model: ''
      x-specification-pii-or-sensitive: 'False'
      x-specification-scenario: ''
      x-specification-usecase: 'UC-C-PIC-AT-001, UC-C-PIC-AT-003'
  /audit/data-agreements/:
    post:
      description: LIST - Fetch all data agreements stored in the system
      operationId: auditAgreementList
      parameters:
        - description: Requested index for start of resources to be provided in response requested by client
          in: query
          name: offset
          required: false
          schema:
            type: integer
        - description: Requested number of resources to be provided in response requested by client
          in: query
          name: limit
          required: false
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              properties:
                agreementFilter:
                  $ref: '#/components/schemas/AgreementFilter'
                  description: An object of type AgreementFilter
              required:
                - agreementFilter
              type: object
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  oneOf:
                    - $ref: '#/components/schemas/DataAgreement'
                type: array
          description: ''
        '400':
          description: bad input parameter
      security:
        - BearerAuth: []
      summary: LIST - Fetch all data agreements stored in the system
      tags:
        - auditor
      x-specification-crudl-model: ''
      x-specification-pii-or-sensitive: 'False'
      x-specification-scenario: ''
      x-specification-usecase: 'UC-C-PIC-AT-001, UC-C-PIC-AT-003'
  /config/data-agreement:
    post:
      description: CREATE - Create a new data agreement and returned together with revision
      operationId: configCreateAgreement
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              properties:
                dataAgreement:
                  $ref: '#/components/schemas/DataAgreement'
                  description: An object of type DataAgreement
              required:
                - dataAgreement
              type: object
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  dataAgreement:
                    $ref: '#/components/schemas/DataAgreement'
                  revision:
                    $ref: '#/components/schemas/Revision'
          description: ''
        '400':
          description: bad input parameter
      security:
        - BearerAuth: []
      summary: CREATE - Create data agreement
      tags:
        - config
      x-specification-crudl-model: DataAgreement
      x-specification-pii-or-sensitive: 'False'
      x-specification-scenario: ''
      x-specification-usecase: UC-C-PIC-A-001
  '/config/data-agreement/{dataAgreementId}':
    get:
      description: READ - Fetch the latest version of a data agreement
      operationId: configReadAgreement
      parameters:
        - description: Unique ID of an object
          in: path
          name: dataAgreementId
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  dataAgreement:
                    $ref: '#/components/schemas/DataAgreement'
                  revision:
                    $ref: '#/components/schemas/Revision'
          description: ''
        '400':
          description: bad input parameter
      security:
        - BearerAuth: []
      summary: READ - Read data agreement
      tags:
        - config
      x-specification-crudl-model: DataAgreement
      x-specification-pii-or-sensitive: 'False'
      x-specification-scenario: ''
      x-specification-usecase: UC-C-PIC-A-003
    put:
      description: UPDATE - Update an existing data agreement and returned together with revision
      operationId: configUpdateAgreement
      parameters:
        - description: Unique ID of an object
          in: path
          name: dataAgreementId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                dataAgreement:
                  $ref: '#/components/schemas/DataAgreement'
                  description: An object of type DataAgreement
              required:
                - dataAgreement
              type: object
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  dataAgreement:
                    $ref: '#/components/schemas/DataAgreement'
                  revision:
                    $ref: '#/components/schemas/Revision'
          description: ''
        '400':
          description: bad input parameter
      security:
        - BearerAuth: []
      summary: UPDATE - Update data agreement
      tags:
        - config
      x-specification-crudl-model: DataAgreement
      x-specification-pii-or-sensitive: 'False'
      x-specification-scenario: ''
      x-specification-usecase: UC-C-PIC-A-002
    delete:
      description: DELETE - Delete a data agreement
      operationId: configDeleteAgreement
      parameters:
        - description: Unique ID of an object
          in: path
          name: dataAgreementId
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Revision'
          description: ''
        '400':
          description: bad input parameter
      security:
        - BearerAuth: []
      summary: DELETE - Delete data agreement
      tags:
        - config
      x-specification-crudl-model: DataAgreement
      x-specification-pii-or-sensitive: 'False'
      x-specification-scenario: ''
      x-specification-usecase: UC-C-PIC-A-004
  /config/data-agreements:
    get:
      description: LIST - Fetch all data agreements
      operationId: configListAgreement
      parameters:
        - $ref: '#/paths/~1config~1policies/get/parameters/1'
        - $ref: '#/paths/~1config~1policies/get/parameters/2'
        - $ref: '#/paths/~1config~1policies/get/parameters/3'
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  dataAgreements:
                    items:
                      $ref: '#/components/schemas/DataAgreement'
                    type: array
                  pagination:
                    $ref: '#/components/schemas/Pagination'
          description: ''
        '400':
          description: bad input parameter
      security:
        - BearerAuth: []
      summary: LIST - List all data agreements
      tags:
        - config
      x-specification-crudl-model: DataAgreement
      x-specification-pii-or-sensitive: 'False'
      x-specification-scenario: ''
      x-specification-usecase: UC-C-PIC-A-003
  /config/policy:
    post:
      description: CREATE - Create a new policy and returned together with revision
      operationId: configCreatePolicy
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              properties:
                policy:
                  $ref: '#/components/schemas/Policy'
                  description: An object of type Policy
              required:
                - policy
              type: object
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  policy:
                    $ref: '#/components/schemas/Policy'
                  revision:
                    $ref: '#/components/schemas/Revision'
          description: 'A set consisting of the new Policy object created, together with the initial Revision object.'
        '400':
          description: bad input parameter
      security:
        - BearerAuth: []
      summary: CREATE - Create policy
      tags:
        - config
      x-specification-crudl-model: Policy
      x-specification-pii-or-sensitive: 'False'
      x-specification-scenario: ''
      x-specification-usecase: UC-C-PIC-A-001
  '/config/policy/{policyId}':
    get:
      description: 'READ - Fetch a policy + latest revision. If a policy filter is supplied and contains a `revisionId`, then this specific revision is returned.'
      operationId: configReadPolicy
      parameters:
        - description: Unique ID of an object
          in: path
          name: policyId
          required: true
          schema:
            type: string
        - description: An object with id revisionId
          in: query
          name: revisionId
          required: false
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  policy:
                    $ref: '#/components/schemas/Policy'
                  revision:
                    $ref: '#/components/schemas/Revision'
          description: ''
        '400':
          description: bad input parameter
      security:
        - BearerAuth: []
      summary: READ - Read policy
      tags:
        - config
      x-specification-crudl-model: Policy
      x-specification-pii-or-sensitive: 'False'
      x-specification-scenario: ''
      x-specification-usecase: UC-C-PIC-A-003
    put:
      description: 'UPDATE - Update an existing policy, returning the updated version and a new revision. Updating a Policy does not affect existing references in DataAgreement, the new revision should be specified for DataAgreement.'
      operationId: configUpdatePolicy
      parameters:
        - description: Unique ID of an object
          in: path
          name: policyId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                policy:
                  $ref: '#/components/schemas/Policy'
                  description: An object of type Policy
              required:
                - policy
              type: object
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  policy:
                    $ref: '#/components/schemas/Policy'
                  revision:
                    $ref: '#/components/schemas/Revision'
          description: ''
        '400':
          description: bad input parameter
      security:
        - BearerAuth: []
      summary: UPDATE - Update policy
      tags:
        - config
      x-specification-crudl-model: Policy
      x-specification-pii-or-sensitive: 'False'
      x-specification-scenario: ''
      x-specification-usecase: UC-C-PIC-A-002
    delete:
      description: 'DELETE - Deletes an existing policy, returning the updated version and a new revision. Deleting a policy is not possible if it''s associated with active DataAgreement.'
      operationId: configDeletePolicy
      parameters:
        - description: Unique ID of an object
          in: path
          name: policyId
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Revision'
          description: ''
        '400':
          description: bad input parameter
      security:
        - BearerAuth: []
      summary: DELETE - Deletes policy
      tags:
        - config
      x-specification-crudl-model: Policy
      x-specification-pii-or-sensitive: 'False'
      x-specification-scenario: ''
      x-specification-usecase: UC-C-PIC-A-004
  /config/policies:
    get:
      description: LIST - Fetch all policies
      operationId: configListPolicy
      parameters:
        - description: An object with id revisionId
          in: query
          name: revisionId
          required: false
          schema:
            type: string
        - description: Requested index for start of resources to be provided in response requested by client
          in: query
          name: offset
          required: false
          schema:
            type: integer
        - name: limit
          in: query
          description: Number of items returned per page. Requested number of resources to be provided in response requested by client
          required: false
          schema:
            type: integer
            default: 10
        - name: page
          in: query
          description: Page number
          required: false
          schema:
            type: integer
            default: 1
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  policies:
                    items:
                      $ref: '#/components/schemas/Policy'
                    type: array
                  pagination:
                    $ref: '#/components/schemas/Pagination'
          description: A list of Policy objects readable for the current session's credentials.
        '400':
          description: bad input parameter
      security:
        - BearerAuth: []
      summary: LIST - List all policies
      tags:
        - config
      x-specification-crudl-model: Policy
      x-specification-pii-or-sensitive: 'False'
      x-specification-scenario: ''
      x-specification-usecase: 'UC-C-PIC-A-001, UC-C-PIC-A-002'
  '/config/policy/{policyId}/revisions':
    get:
      description: LIST - Returns all the revisions for the policy
      operationId: configListPolicyRevisions
      parameters:
        - description: Unique ID of an object
          in: path
          name: policyId
          required: true
          schema:
            type: string
        - $ref: '#/paths/~1config~1policies/get/parameters/1'
        - $ref: '#/paths/~1config~1policies/get/parameters/2'
        - $ref: '#/paths/~1config~1policies/get/parameters/3'
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  policy:
                    $ref: '#/components/schemas/Policy'
                  revisions:
                    type: array
                    items:
                      $ref: '#/components/schemas/Revision'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
          description: ''
        '400':
          description: bad input parameter
      security:
        - BearerAuth: []
      summary: LIST - List all policy revisions
      tags:
        - config
      x-specification-crudl-model: Revision
      x-specification-pii-or-sensitive: 'False'
      x-specification-scenario: ''
      x-specification-usecase: UC-C-PIC-A-003
  /config/webhooks/event-types:
    get:
      operationId: configReadWebhookEventTypes
      description: Get webhook event types
      summary: READ - Read webhook event types
      tags:
        - config
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                required:
                  - eventTypes
                type: object
                properties:
                  eventTypes:
                    type: array
                    items:
                      type: string
                      title: WebhookEventType
                      enum:
                        - data.update.initiated
                        - data.update.cancelled
                        - consent.allowed
                        - consent.disallowed
                        - consent.auto_expiry
                        - org.unsubscribed
                        - data.delete.initiated
                        - data.download.initiated
                        - data.delete.cancelled
                        - data.download.cancelled
                        - org.subscribed
      deprecated: false
      security:
        - BearerAuth: []
  /config/webhooks/payload/content-types:
    get:
      operationId: getWebhookPayloadContentTypes.yaml
      summary: Get webhook payload content types
      description: Get webhook payload content types
      tags:
        - config
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                required:
                  - ContentTypes
                type: object
                properties:
                  ContentTypes:
                    type: array
                    items:
                      type: string
                      enum:
                        - application/json
                        - application/x-www-form-urlencoded
      deprecated: false
      security:
        - BearerAuth: []
  /config/webhook:
    post:
      operationId: configCreateWebhook
      summary: CREATE - Create webhook
      description: Create webhook
      tags:
        - config
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Webhook'
        required: true
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Webhook'
      deprecated: false
      security:
        - BearerAuth: []
  /config/webhooks:
    get:
      operationId: configListWebhooks
      summary: Get all webhooks for an organisation
      description: Get all webhooks for an organisation
      tags:
        - config
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  required:
                    - ID
                    - PayloadURL
                    - Disabled
                    - TimeStamp
                    - IsLastDeliverySuccess
                  type: object
                  properties:
                    ID:
                      type: string
                    PayloadURL:
                      type: string
                    Disabled:
                      type: boolean
                    TimeStamp:
                      type: string
                    IsLastDeliverySuccess:
                      type: boolean
      deprecated: false
      security:
        - BearerAuth: []
  '/config/webhook/{webhookId}':
    get:
      operationId: configReadWebhook
      summary: READ - Read webhook
      description: Get a webhook by ID
      tags:
        - config
      parameters:
        - name: webhookId
          in: path
          required: true
          style: simple
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                required:
                  - ID
                  - OrgID
                  - PayloadURL
                  - ContentType
                  - SubscribedEvents
                  - Disabled
                  - SecretKey
                  - SkipSSLVerification
                  - TimeStamp
                type: object
                properties:
                  ID:
                    type: string
                  OrgID:
                    type: string
                  PayloadURL:
                    type: string
                  ContentType:
                    type: string
                  SubscribedEvents:
                    type: array
                    items:
                      type: string
                  Disabled:
                    type: boolean
                  SecretKey:
                    type: string
                  SkipSSLVerification:
                    type: boolean
                  TimeStamp:
                    type: string
      deprecated: false
      security:
        - BearerAuth: []
    delete:
      operationId: configDeleteWebhook
      summary: DELETE - Delete webhook
      description: Delete webhook
      tags:
        - config
      parameters:
        - name: webhookId
          in: path
          required: true
          style: simple
          schema:
            type: string
      responses:
        '204':
          description: No Content
          content: {}
      deprecated: false
      security:
        - BearerAuth: []
    put:
      operationId: configUpdateWebhook
      summary: UPDATE - Update webhook
      description: UPDATE - Update webhook
      tags:
        - config
      parameters:
        - name: webhookId
          in: path
          required: true
          style: simple
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              required:
                - payloadurl
                - subscribedevents
                - contenttype
                - secretkey
                - disabled
                - skipsslverification
              type: object
              properties:
                payloadurl:
                  type: string
                subscribedevents:
                  type: array
                  items:
                    type: string
                contenttype:
                  type: string
                secretkey:
                  type: string
                disabled:
                  type: boolean
                skipsslverification:
                  type: boolean
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                required:
                  - ID
                  - OrgID
                  - PayloadURL
                  - ContentType
                  - SubscribedEvents
                  - Disabled
                  - SecretKey
                  - SkipSSLVerification
                  - TimeStamp
                type: object
                properties:
                  ID:
                    type: string
                  OrgID:
                    type: string
                  PayloadURL:
                    type: string
                  ContentType:
                    type: string
                  SubscribedEvents:
                    type: array
                    items:
                      type: string
                  Disabled:
                    type: boolean
                  SecretKey:
                    type: string
                  SkipSSLVerification:
                    type: boolean
                  TimeStamp:
                    type: string
      deprecated: false
      security:
        - BearerAuth: []
  '/config/webhook/{webhookId}/ping':
    post:
      operationId: configPingWebhook
      summary: Ping webhook
      description: Ping webhook
      tags:
        - config
      parameters:
        - name: webhookId
          in: path
          required: true
          style: simple
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                required:
                  - ResponseStatusCode
                  - ResponseStatusStr
                  - ExecutionStartTimeStamp
                  - ExecutionEndTimeStamp
                  - Status
                  - StatusDescription
                type: object
                properties:
                  ResponseStatusCode:
                    type: integer
                    format: int32
                  ResponseStatusStr:
                    type: string
                  ExecutionStartTimeStamp:
                    type: string
                  ExecutionEndTimeStamp:
                    type: string
                  Status:
                    type: string
                  StatusDescription:
                    type: string
      deprecated: false
      security:
        - BearerAuth: []
  '/config/webhooks/{webhookId}/deliveries':
    get:
      operationId: configListAllRecentWebhookDeliveries
      summary: Get recent webhook deliveries
      description: Get recent webhook deliveries
      tags:
        - config
      parameters:
        - name: webhookId
          in: path
          required: true
          style: simple
          schema:
            type: string
        - $ref: '#/paths/~1config~1policies/get/parameters/1'
        - $ref: '#/paths/~1config~1policies/get/parameters/2'
        - $ref: '#/paths/~1config~1policies/get/parameters/3'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                required:
                  - webhookDeliveries
                  - pagination
                type: object
                properties:
                  webhookDeliveries:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                        webhookId:
                          type: string
                        responseStatusCode:
                          type: integer
                          format: int32
                        responseStatusStr:
                          type: string
                        timestamp:
                          type: string
                        status:
                          type: string
                        statusDescription:
                          type: string
                  pagination:
                    $ref: '#/components/schemas/Pagination'
      deprecated: false
      security:
        - BearerAuth: []
  '/config/webhooks/{webhookId}/delivery/{deliveryId}':
    get:
      operationId: configReadRecentWebhookDelivery
      summary: Get recent webhook delivery by ID
      description: Get recent webhook delivery by ID
      tags:
        - config
      parameters:
        - name: webhookId
          in: path
          required: true
          style: simple
          schema:
            type: string
        - name: deliveryId
          in: path
          required: true
          style: simple
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                required:
                  - ID
                  - RequestHeaders
                  - RequestPayload
                  - ResponseHeaders
                  - ResponseBody
                  - ResponseStatusCode
                  - ResponseStatusStr
                  - ExecutionStartTimeStamp
                  - ExecutionEndTimeStamp
                  - Status
                  - StatusDescription
                type: object
                properties:
                  ID:
                    type: string
                  RequestHeaders:
                    required:
                      - Accept
                      - Content-Type
                      - User-Agent
                      - X-Igrant-Signature
                    type: object
                    properties:
                      Accept:
                        type: array
                        items:
                          type: string
                      Content-Type:
                        type: array
                        items:
                          type: string
                      User-Agent:
                        type: array
                        items:
                          type: string
                      X-Igrant-Signature:
                        type: array
                        items:
                          type: string
                  RequestPayload:
                    required:
                      - data
                      - deliveryid
                      - timestamp
                      - type
                      - webhookid
                    type: object
                    properties:
                      data:
                        required:
                          - attribute
                          - consentID
                          - days
                          - organisationID
                          - purposeID
                          - timestamp
                          - userID
                        type: object
                        properties:
                          attribute:
                            type: array
                            items:
                              type: string
                          consentID:
                            type: string
                          days:
                            type: integer
                            format: int32
                          organisationID:
                            type: string
                          purposeID:
                            type: string
                          timestamp:
                            type: string
                          userID:
                            type: string
                      deliveryid:
                        type: string
                      timestamp:
                        type: string
                      type:
                        type: string
                      webhookid:
                        type: string
                  ResponseHeaders:
                    ResponseHeaders: null
                    title: ResponseHeaders
                    required:
                      - Cache-Control
                      - Content-Type
                      - Date
                      - Server
                      - Vary
                      - X-Request-Id
                      - X-Token-Id
                    type: object
                    properties:
                      Cache-Control:
                        type: array
                        items:
                          type: string
                      Content-Type:
                        type: array
                        items:
                          type: string
                      Date:
                        type: array
                        items:
                          type: string
                      Server:
                        type: array
                        items:
                          type: string
                      Vary:
                        type: array
                        items:
                          type: string
                      X-Request-Id:
                        type: array
                        items:
                          type: string
                      X-Token-Id:
                        type: array
                        items:
                          type: string
                  ResponseBody:
                    type: string
                  ResponseStatusCode:
                    type: integer
                    format: int32
                  ResponseStatusStr:
                    type: string
                  ExecutionStartTimeStamp:
                    type: string
                  ExecutionEndTimeStamp:
                    type: string
                  Status:
                    type: string
                  StatusDescription:
                    type: string
      deprecated: false
      security:
        - BearerAuth: []
  '/config/webhooks/{webhookId}/delivery/{deliveryId}/redeliver':
    post:
      operationId: configRedeliverWebhook
      summary: Redeliver a webhook payload by delivery ID
      description: Redeliver a webhook payload by delivery ID
      tags:
        - config
      parameters:
        - name: organizationId
          in: path
          required: true
          style: simple
          schema:
            type: string
        - name: webhookId
          in: path
          required: true
          style: simple
          schema:
            type: string
        - name: deliveryId
          in: path
          required: true
          style: simple
          schema:
            type: string
      responses:
        '200':
          description: OK
          content: {}
      deprecated: false
      security:
        - BearerAuth: []
  /onboard/admin/login:
    post:
      tags:
        - onboard
      description: Login organisation admin
      operationId: loginOrganisationAdmin
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              required:
                - username
                - password
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                required:
                  - accessToken
                  - expiresIn
                  - refreshExpiresIn
                  - refreshToken
                  - tokenType
                type: object
                title: Token
                properties:
                  accessToken:
                    type: string
                  expiresIn:
                    type: integer
                    format: int32
                  refreshExpiresIn:
                    type: integer
                    format: int32
                  refreshToken:
                    type: string
                  tokenType:
                    type: string
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                required:
                  - errorCode
                  - errorDescription
                type: object
                properties:
                  errorCode:
                    type: string
                  errorDescription:
                    type: string
      deprecated: false
  /onboard/individual/login:
    post:
      tags:
        - onboard
      description: Login individual
      operationId: loginIndividual
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              required:
                - username
                - password
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                required:
                  - individual
                  - token
                type: object
                properties:
                  individual:
                    allOf:
                      - $ref: '#/components/schemas/Individual'
                      - type: object
                        title: IndividualExtras
                        properties:
                          name:
                            type: string
                          iamId:
                            type: string
                          email:
                            type: string
                          phone:
                            type: string
                          imageId:
                            type: string
                          imageUrl:
                            type: string
                          lastVisit:
                            type: string
                          orgs:
                            type: array
                            items:
                              required:
                                - id
                                - name
                                - location
                                - type
                                - typeId
                                - eulaAccepted
                              type: object
                              properties:
                                id:
                                  type: string
                                name:
                                  type: string
                                location:
                                  type: string
                                type:
                                  type: string
                                typeId:
                                  type: string
                                eulaAccepted:
                                  type: boolean
                          apiKey:
                            type: string
                          roles:
                            type: array
                            items:
                              required:
                                - roleId
                                - orgId
                              type: object
                              properties:
                                roleId:
                                  type: integer
                                  format: int32
                                orgId:
                                  type: string
                          incompleteProfile:
                            type: boolean
                  token:
                    $ref: '#/paths/~1onboard~1admin~1login/post/responses/200/content/application~1json/schema'
      deprecated: false
  /onboard/organisation:
    get:
      deprecated: false
      description: Get organization
      operationId: getOrganisation
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  organisation:
                    required:
                      - name
                      - location
                      - description
                      - policyUrl
                    type: object
                    properties:
                      id:
                        type: string
                      name:
                        type: string
                      description:
                        type: string
                      location:
                        type: string
                      policyUrl:
                        type: string
                      coverImageId:
                        type: string
                      coverImageUrl:
                        type: string
                      logoImageId:
                        type: string
                      logoImageUrl:
                        type: string
                required:
                  - organisation
                type: object
          description: OK
      security:
        - BearerAuth: []
      tags:
        - onboard
    put:
      deprecated: false
      description: Update organization
      operationId: updateOrganisation
      requestBody:
        content:
          application/json:
            schema:
              properties:
                description:
                  type: string
                location:
                  type: string
                name:
                  type: string
                policyUrl:
                  type: string
              required:
                - name
                - location
                - description
                - policyUrl
              type: object
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  organisation:
                    $ref: '#/paths/~1onboard~1organisation/get/responses/200/content/application~1json/schema/properties/organisation'
                required:
                  - organisation
                type: object
          description: Updated the organisation
      security:
        - BearerAuth: []
      tags:
        - onboard
  /onboard/organisation/coverimage:
    get:
      deprecated: false
      description: Get organization cover image
      operationId: getOrganisationCoverImage
      responses:
        '200':
          headers: {}
      security:
        - BearerAuth: []
      tags:
        - onboard
    post:
      deprecated: false
      description: Update organization cover image
      operationId: updateOrganisationCoverImage
      requestBody:
        content:
          multipart/form-data:
            encoding: {}
            schema:
              properties:
                orgimage:
                  format: binary
                  type: string
              required:
                - orgimage
              type: object
        required: false
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  coverImageId:
                    type: string
                  coverImageUrl:
                    type: string
                required:
                  - coverImageId
                  - coverImageUrl
                type: object
          description: OK
      security:
        - BearerAuth: []
      tags:
        - onboard
  /onboard/organisation/logoimage:
    get:
      deprecated: false
      description: Get organization logo image
      operationId: getOrganisationLogoImage
      responses:
        '200':
          headers: {}
      security:
        - BearerAuth: []
      tags:
        - onboard
    post:
      deprecated: false
      description: Update organization logo image
      operationId: updateOrganisationLogoImage
      requestBody:
        content:
          multipart/form-data:
            encoding: {}
            schema:
              properties:
                orgimage:
                  format: binary
                  type: string
              required:
                - orgimage
              type: object
        required: false
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  logoImageId:
                    type: string
                  logoImageUrl:
                    type: string
                required:
                  - logoImageId
                  - logoImageUrl
                type: object
          description: OK
      security:
        - BearerAuth: []
      tags:
        - onboard
  /onboard/token/refresh:
    post:
      deprecated: false
      description: Refresh access token
      operationId: refreshToken
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              properties:
                clientId:
                  type: string
                refreshToken:
                  type: string
              required:
                - refreshToken
                - clientId
              type: object
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/paths/~1onboard~1admin~1login/post/responses/200/content/application~1json/schema'
          description: OK
      security: []
      tags:
        - onboard
  /onboard/validate/email:
    post:
      operationId: validateEmail
      tags:
        - onboard
      description: Validate email
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              required:
                - email
              type: object
              properties:
                email:
                  type: string
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                required:
                  - result
                  - message
                type: object
                properties:
                  result:
                    type: boolean
                  message:
                    type: string
                example:
                  result: true
                  message: Email address is valid and not in use in our system
      deprecated: false
      security:
        - BearerAuth: []
  /onboard/validate/phone:
    post:
      operationId: validatePhone
      tags:
        - onboard
      description: Validate phone
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              required:
                - phone
              type: object
              properties:
                phone:
                  type: string
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                required:
                  - result
                  - message
                type: object
                properties:
                  result:
                    type: boolean
                  message:
                    type: string
                example:
                  result: false
                  message: Phone number is in use
      deprecated: false
      security:
        - BearerAuth: []
  /onboard/verify/otp:
    post:
      operationId: verifyOtp
      tags:
        - onboard
      description: Verify OTP
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              required:
                - phone
                - otp
              type: object
              properties:
                phone:
                  type: string
                otp:
                  type: string
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                required:
                  - result
                  - message
                type: object
                properties:
                  result:
                    type: boolean
                  message:
                    type: string
                example:
                  result: true
                  message: Otp validatiation Succeeded
      deprecated: false
      security:
        - BearerAuth: []
  /onboard/verify/phone:
    post:
      operationId: verifyPhone
      tags:
        - onboard
      description: For OTP verification of the given phone number
      summary: Verify phone
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              required:
                - email
                - phone
              type: object
              properties:
                email:
                  type: string
                phone:
                  type: string
        required: true
      responses:
        '204':
          description: No Content
          content: {}
      deprecated: false
      security:
        - BearerAuth: []
  '/service/data-agreement/{dataAgreementId}':
    get:
      description: READ - Fetches the latest version of an DataAgreement
      operationId: serviceAgreementRead
      parameters:
        - description: Unique ID of an object
          in: path
          name: dataAgreementId
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  oneOf:
                    - $ref: '#/components/schemas/DataAgreement'
                    - $ref: '#/components/schemas/Revision'
                type: array
          description: ''
        '400':
          description: bad input parameter
      security:
        - BearerAuth: []
      summary: READ - Fetches the latest version of an DataAgreement
      tags:
        - service
      x-specification-crudl-model: DataAgreement
      x-specification-pii-or-sensitive: 'False'
      x-specification-scenario: ''
      x-specification-usecase: UC-C-PIC-A-003
  '/service/data-agreement/{dataAgreementId}/data-attributes':
    get:
      description: READ - Fetch all latest versions of AgreementData associated with an DataAgreement and the presented revisionId of that DataAgreement
      operationId: serviceAgreementDataRead
      parameters:
        - description: Unique ID of an object
          in: path
          name: dataAgreementId
          required: true
          schema:
            type: string
        - description: An object with id revisionId
          in: query
          name: revisionId
          required: false
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  oneOf:
                    - $ref: '#/components/schemas/AgreementData'
                type: array
          description: ''
        '400':
          description: bad input parameter
      security:
        - BearerAuth: []
      summary: READ - Fetch all latest versions of AgreementData associated with an DataAgreement and the presented revisionId of that DataAgreement
      tags:
        - service
      x-specification-crudl-model: AgreementData
      x-specification-pii-or-sensitive: 'False'
      x-specification-scenario: ''
      x-specification-usecase: UC-C-PIC-A-003
  /service/individual:
    post:
      description: CREATE - Create an individual in the consent system
      operationId: serviceIndividualCreate
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              properties:
                individual:
                  $ref: '#/components/schemas/Individual'
                  description: An object of type Individual
              required:
                - individual
              type: object
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Individual'
          description: ''
        '400':
          description: bad input parameter
      security:
        - BearerAuth: []
      summary: CREATE - Create an individual in the consent system
      tags:
        - service
      x-specification-crudl-model: Individual
      x-specification-pii-or-sensitive: 'True'
      x-specification-scenario: ''
      x-specification-usecase: ''
  /service/individual/data-agreement-records:
    delete:
      description: 'DELETE - Cascading delete operation for Right To Be Forgotten, deletes all data agreement records that shall not be retained and have a "forgettable" DataAgreement. May also delete an unsigned data agreement record, for instance in cases where the user exits the signing process. Individual ID supplied as HTTP header.'
      operationId: serviceDeleteAllRecords
      parameters: []
      responses:
        '200':
          description: ''
        '400':
          description: bad input parameter
      security:
        - BearerAuth: []
      summary: DELETE - Delete all data agreement records
      tags:
        - service
      x-specification-crudl-model: ''
      x-specification-pii-or-sensitive: 'True'
      x-specification-scenario: ''
      x-specification-usecase: UC-C-PIC-I-003
    get:
      description: LIST - Fetch all current unambiguous data agreement records stored for individualId supplied as HTTP header.
      operationId: serviceListIndividualConsentRecordList
      parameters:
        - description: Requested index for start of resources to be provided in response requested by client
          in: query
          name: offset
          required: false
          schema:
            type: integer
        - description: Requested number of resources to be provided in response requested by client
          in: query
          name: limit
          required: false
          schema:
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  oneOf:
                    - $ref: '#/components/schemas/ConsentRecord'
                type: array
          description: ''
        '400':
          description: bad input parameter
      security:
        - BearerAuth: []
      summary: LIST - Fetch all consent records for individual
      tags:
        - service
      x-specification-crudl-model: ''
      x-specification-pii-or-sensitive: 'True'
      x-specification-scenario: ''
      x-specification-usecase: UC-C-PIC-I-001
  /service/individual/record/data-agreement-record:
    post:
      description: CREATE - Create a paired consent record and signature object. Returns the same objects with the PK defined.
      operationId: serviceCreateIndividualConsentRecordAndSignature
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              properties:
                consentRecord:
                  $ref: '#/components/schemas/ConsentRecord'
                  description: An object of type ConsentRecord
                signature:
                  $ref: '#/components/schemas/Signature'
                  description: An object of type Signature
              required:
                - consentRecord
                - signature
              type: object
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  oneOf:
                    - $ref: '#/components/schemas/ConsentRecord'
                    - $ref: '#/components/schemas/Revision'
                    - $ref: '#/components/schemas/Signature'
                type: array
          description: ''
        '400':
          description: bad input parameter
      security:
        - BearerAuth: []
      summary: CREATE - Create a paired consent record and signature object
      tags:
        - service
      x-specification-crudl-model: ''
      x-specification-pii-or-sensitive: 'True'
      x-specification-scenario: '1.2'
      x-specification-usecase: UC-C-PIC-I-002
  '/service/individual/record/data-agreement-record/{dataAgreementRecordId}':
    put:
      description: UPDATE* - Update a particular data agreement record. The individualId supplied as HTTP header. Note that updating a signed Consent Record invalidates its signature.
      operationId: serviceUpdateIndividualConsentRecord
      parameters:
        - description: Unique ID of an object
          in: path
          name: dataAgreementRecordId
          required: true
          schema:
            type: string
        - description: An object with id individualId
          in: query
          name: individualId
          required: true
          schema:
            type: string
        - description: An object with id dataAgreementId
          in: query
          name: dataAgreementId
          required: true
          schema:
            type: string
        - description: An object with id revisionId
          in: query
          name: revisionId
          required: false
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  oneOf:
                    - $ref: '#/components/schemas/ConsentRecord'
                    - $ref: '#/components/schemas/Revision'
                type: array
          description: ''
        '400':
          description: bad input parameter
      security:
        - BearerAuth: []
      summary: UPDATE* - Update a particular data agreement record
      tags:
        - service
      x-specification-crudl-model: ''
      x-specification-pii-or-sensitive: 'True'
      x-specification-scenario: ''
      x-specification-usecase: UC-C-PIC-I-003
  '/service/individual/record/data-agreement-record/{dataAgreementRecordId}/signature':
    post:
      description: CREATE - Creates and returns a blank Signature object for the data agreement record
      operationId: serviceCreateIndividualConsentRecordSignature
      parameters:
        - description: Unique ID of an object
          in: path
          name: dataAgreementRecordId
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Signature'
          description: ''
        '400':
          description: bad input parameter
      security:
        - BearerAuth: []
      summary: CREATE - Creates and returns a blank Signature object for the data agreement record
      tags:
        - service
      x-specification-crudl-model: ''
      x-specification-pii-or-sensitive: 'True'
      x-specification-scenario: ''
      x-specification-usecase: UC-Post-Partum-001-Registration_PostPartum_and_InfantCare
    put:
      description: UPDATE - Updates a Signature object for a Consent Record. This is used to add a signature to an existing unsigned Signature object. Consent BB is responsible for updating the Consent Record state.
      operationId: serviceUpdateIndividualConsentRecordSignature
      parameters:
        - description: Unique ID of an object
          in: path
          name: dataAgreementRecordId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                signature:
                  $ref: '#/components/schemas/Signature'
                  description: An object of type Signature
              required:
                - signature
              type: object
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Signature'
          description: ''
        '400':
          description: bad input parameter
      security:
        - BearerAuth: []
      summary: UPDATE - Updates a Signature object for a Consent Record
      tags:
        - service
      x-specification-crudl-model: ''
      x-specification-pii-or-sensitive: 'True'
      x-specification-scenario: ''
      x-specification-usecase: UC-Post-Partum-001-Registration_PostPartum_and_InfantCare
  '/service/individual/record/data-agreement/{dataAgreementId}':
    get:
      description: READ - Fetch the current record for data agreement. There should be one unambiguous ConsentRecord for an Individual and an DataAgreement. The individualId is supplied as HTTP header.
      operationId: serviceReadIndividualRecordRead
      parameters:
        - description: Unique ID of an object
          in: path
          name: dataAgreementId
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConsentRecord'
          description: ''
        '400':
          description: bad input parameter
      security:
        - BearerAuth: []
      summary: READ - Fetch the current record for data agreement
      tags:
        - service
      x-specification-crudl-model: ''
      x-specification-pii-or-sensitive: 'True'
      x-specification-scenario: ''
      x-specification-usecase: UC-C-PIC-I-001
    post:
      description: 'CREATE - For a particular individual and a particular data agreement, create a new data agreement record pointing to the current revision of a given data agreement. The individualId supplied as HTTP header.'
      operationId: serviceCreateIndividualConsentRecord
      parameters:
        - description: Unique ID of an object
          in: path
          name: dataAgreementId
          required: true
          schema:
            type: string
        - description: An object with id individualId
          in: query
          name: individualId
          required: true
          schema:
            type: string
        - description: An object with id revisionId
          in: query
          name: revisionId
          required: false
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  oneOf:
                    - $ref: '#/components/schemas/ConsentRecord'
                    - $ref: '#/components/schemas/Revision'
                type: array
          description: ''
        '400':
          description: bad input parameter
      security:
        - BearerAuth: []
      summary: CREATE - Create a data agreement record
      tags:
        - service
      x-specification-crudl-model: ''
      x-specification-pii-or-sensitive: 'True'
      x-specification-scenario: '1.2'
      x-specification-usecase: UC-C-PIC-I-002
  '/service/individual/record/data-agreement/{dataAgreementId}/all':
    get:
      description: LIST - Fetches all data agreement records given to a data agreement. The individualId is supplied as header.
      operationId: serviceListIndividualAgreementConsentRecordList
      parameters:
        - description: Unique ID of an object
          in: path
          name: dataAgreementId
          required: true
          schema:
            type: string
        - description: Requested index for start of resources to be provided in response requested by client
          in: query
          name: offset
          required: false
          schema:
            type: integer
        - description: Requested number of resources to be provided in response requested by client
          in: query
          name: limit
          required: false
          schema:
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  oneOf:
                    - $ref: '#/components/schemas/ConsentRecord'
                type: array
          description: ''
        '400':
          description: bad input parameter
      security:
        - BearerAuth: []
      summary: LIST - Fetches all data agreement records given to a data agreement
      tags:
        - service
      x-specification-crudl-model: ''
      x-specification-pii-or-sensitive: 'True'
      x-specification-scenario: ''
      x-specification-usecase: UC-C-PIC-I-001
  '/service/individual/{individualId}':
    delete:
      description: DELETE - Entirely removes an individual from the system and cascades necessary actions to related ConsentRecord objects
      operationId: serviceIndividualDelete
      parameters:
        - description: Unique ID of an object
          in: path
          name: individualId
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Individual'
          description: ''
        '400':
          description: bad input parameter
      security:
        - BearerAuth: []
      summary: DELETE - Entirely removes an individual from the system and cascades necessary actions to related ConsentRecord objects
      tags:
        - service
      x-specification-crudl-model: Individual
      x-specification-pii-or-sensitive: 'True'
      x-specification-scenario: ''
      x-specification-usecase: ''
    get:
      description: READ - Fetch an Individual in the Consent system
      operationId: serviceIndividualRead
      parameters:
        - description: Unique ID of an object
          in: path
          name: individualId
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Individual'
          description: ''
        '400':
          description: bad input parameter
      security:
        - BearerAuth: []
      summary: READ - Fetch an Individual in the Consent system
      tags:
        - service
      x-specification-crudl-model: Individual
      x-specification-pii-or-sensitive: 'True'
      x-specification-scenario: ''
      x-specification-usecase: ''
    put:
      description: UPDATE - Updates an Individual in the Consent system
      operationId: serviceIndividualUpdate
      parameters:
        - description: Unique ID of an object
          in: path
          name: individualId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                individual:
                  $ref: '#/components/schemas/Individual'
                  description: An object of type Individual
              required:
                - individual
              type: object
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Individual'
          description: ''
        '400':
          description: bad input parameter
      security:
        - BearerAuth: []
      summary: UPDATE - Updates an Individual in the Consent system
      tags:
        - service
      x-specification-crudl-model: Individual
      x-specification-pii-or-sensitive: 'True'
      x-specification-scenario: ''
      x-specification-usecase: ''
  /service/individuals:
    get:
      description: LIST - List all individuals in the system
      operationId: serviceIndividualList
      parameters:
        - description: Requested index for start of resources to be provided in response requested by client
          in: query
          name: offset
          required: false
          schema:
            type: integer
        - description: Requested number of resources to be provided in response requested by client
          in: query
          name: limit
          required: false
          schema:
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  oneOf:
                    - $ref: '#/components/schemas/Individual'
                type: array
          description: ''
        '400':
          description: bad input parameter
      security:
        - BearerAuth: []
      summary: LIST - List all individuals in the system
      tags:
        - service
      x-specification-crudl-model: Individual
      x-specification-pii-or-sensitive: 'True'
      x-specification-scenario: ''
      x-specification-usecase: ''
  '/service/policy/{policyId}':
    get:
      description: READ - Fetch the latest version of a Policy and the presented revisionId of an associated DataAgreement
      operationId: servicePolicyRead
      parameters:
        - description: Unique ID of an object
          in: path
          name: policyId
          required: true
          schema:
            type: string
        - description: An object with id revisionId
          in: query
          name: revisionId
          required: false
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  oneOf:
                    - $ref: '#/components/schemas/Policy'
                    - $ref: '#/components/schemas/Revision'
                type: array
          description: ''
        '400':
          description: bad input parameter
      security:
        - BearerAuth: []
      summary: READ - Fetch the latest version of a Policy and the presented revisionId of an associated DataAgreement
      tags:
        - service
      x-specification-crudl-model: Policy
      x-specification-pii-or-sensitive: 'False'
      x-specification-scenario: ''
      x-specification-usecase: UC-C-PIC-A-003
  /service/verification/data-agreement-records:
    post:
      description: 'LIST - Fetch consent records (latest revision). For a given ConsentRecordFilter, query if consent exists.'
      operationId: serviceVerificationConsentRecordList
      parameters:
        - description: Requested index for start of resources to be provided in response requested by client
          in: query
          name: offset
          required: false
          schema:
            type: integer
        - description: Requested number of resources to be provided in response requested by client
          in: query
          name: limit
          required: false
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              properties:
                consentRecordFilter:
                  $ref: '#/components/schemas/ConsentRecordFilter'
                  description: An object of type ConsentRecordFilter
              required:
                - consentRecordFilter
              type: object
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  oneOf:
                    - $ref: '#/components/schemas/ConsentRecord'
                type: array
          description: ''
        '400':
          description: bad input parameter
      security:
        - BearerAuth: []
      summary: 'LIST - Fetch consent records (latest revision). For a given ConsentRecordFilter, query if consent exists.'
      tags:
        - service
      x-specification-crudl-model: ''
      x-specification-pii-or-sensitive: 'True'
      x-specification-scenario: '3.1, 1.2'
      x-specification-usecase: UC-C-PIC-A-003
  '/service/verification/data-agreement/{dataAgreementId}':
    get:
      description: READ - Fetch a specific data agreement record (latest revision). The individualId is supplied as HTTP header.
      operationId: serviceVerificationAgreementConsentRecordRead
      parameters:
        - description: Unique ID of an object
          in: path
          name: dataAgreementId
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  oneOf:
                    - $ref: '#/components/schemas/ConsentRecord'
                    - $ref: '#/components/schemas/Revision'
                type: array
          description: ''
        '400':
          description: bad input parameter
      security:
        - BearerAuth: []
      summary: READ - Fetch a specific data agreement record (latest revision)
      tags:
        - service
      x-specification-crudl-model: ''
      x-specification-pii-or-sensitive: 'False'
      x-specification-scenario: '1.2'
      x-specification-usecase: UC-C-PIC-A-003
  /service/verification/data-agreements:
    get:
      description: LIST - Fetch all consent records
      operationId: serviceVerificationAgreementList
      parameters:
        - description: Requested index for start of resources to be provided in response requested by client
          in: query
          name: offset
          required: false
          schema:
            type: integer
        - description: Requested number of resources to be provided in response requested by client
          in: query
          name: limit
          required: false
          schema:
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  oneOf:
                    - $ref: '#/components/schemas/ConsentRecord'
                type: array
          description: ''
        '400':
          description: bad input parameter
      security:
        - BearerAuth: []
      summary: LIST - Fetch all consent records
      tags:
        - service
      x-specification-crudl-model: ''
      x-specification-pii-or-sensitive: 'False'
      x-specification-scenario: '1.1'
      x-specification-usecase: UC-C-PIC-A-003
    post:
      description: LIST - Fetch consent records for supplied AgreementFilter
      operationId: serviceVerificationAgreementListFilter
      parameters:
        - description: Requested index for start of resources to be provided in response requested by client
          in: query
          name: offset
          required: false
          schema:
            type: integer
        - description: Requested number of resources to be provided in response requested by client
          in: query
          name: limit
          required: false
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              properties:
                agreementFilter:
                  $ref: '#/components/schemas/AgreementFilter'
                  description: An object of type AgreementFilter
              required:
                - agreementFilter
              type: object
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  oneOf:
                    - $ref: '#/components/schemas/ConsentRecord'
                type: array
          description: ''
        '400':
          description: bad input parameter
      security:
        - BearerAuth: []
      summary: LIST - Fetch consent records for supplied AgreementFilter
      tags:
        - service
      x-specification-crudl-model: ''
      x-specification-pii-or-sensitive: 'False'
      x-specification-scenario: '1.1'
      x-specification-usecase: UC-C-PIC-A-003
servers:
  - description: Development server
    url: 'https://api.bb-consent.dev/v2'
  - description: Staging server
    url: 'https://staging-consent-bb-api.igrant.io/v2'
  - description: Demo server
    url: 'https://demo-consent-bb-api.igrant.io/v2'
tags:
  - description: Operations for external auditing systems to query detailed data from the system and subscribe to notifications.
    name: audit
    x-tag-expanded: false
  - description: Secured operations available to organization API integration
    name: config
    x-tag-expanded: false
  - description: 'Secured operations for individuals, data consumers and applications to record and verify consent'
    name: service
    x-tag-expanded: false
  - description: 'These are used for onboard the organisation, organisation admin and individual users to the system.  It also deals with all authentication and authorisation APIs that can be configured towards external IDPs.'
    name: onboard
    x-tag-expanded: false
